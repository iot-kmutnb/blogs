-- Solution
-- File: rgb_sequencer.vhd
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;

ENTITY rgb_sequencer IS
    GENERIC (
        CLK_HZ : INTEGER := 50000000 -- Input clock frequency in Hz
    );
    PORT (
        CLK   : IN STD_LOGIC; -- Clock input
        RST_N : IN STD_LOGIC; -- Asynchronous active-low reset
        SW    : IN STD_LOGIC_VECTOR(1 DOWNTO 0); -- Speed selection input
        RGB   : OUT STD_LOGIC_VECTOR(2 DOWNTO 0) -- RGB output
    );
END rgb_sequencer;

ARCHITECTURE behavioral OF rgb_sequencer IS

    -- RGB sequence counter
    SIGNAL rgb_reg : unsigned(2 DOWNTO 0) := (OTHERS => '0');

    -- Clock divider signals
    CONSTANT CLK_DIV_BW : INTEGER := 28;
    SIGNAL clk_div_cnt : unsigned(CLK_DIV_BW - 1 DOWNTO 0) := (OTHERS => '0');
    SIGNAL clk_tick : STD_LOGIC := '0';

    -- Clock divider limit
    SIGNAL clk_div_max : unsigned(CLK_DIV_BW - 1 DOWNTO 0);
    CONSTANT SPEED_FAST     : NATURAL := 10;
    CONSTANT SPEED_MODERATE : NATURAL := 5;
    CONSTANT SPEED_SLOW     : NATURAL := 1;

BEGIN

    clk_max_select_proc: PROCESS (SW)
        VARIABLE value : INTEGER;
    BEGIN
        CASE SW IS
            WHEN "01" =>
                value := CLK_HZ / SPEED_FAST;
            WHEN "10" =>
                value := CLK_HZ / SPEED_MODERATE;
            WHEN "11" =>
                value := CLK_HZ / SPEED_SLOW;
            WHEN OTHERS =>
                value := 0;
        END CASE;
        clk_div_max <= to_unsigned(value, clk_div_max'length) - 1;
    END PROCESS;

    clk_tick_proc: PROCESS (CLK, RST_N)
    BEGIN
        IF RST_N = '0' THEN
            clk_div_cnt <= (OTHERS => '0');
            clk_tick <= '0';
        ELSIF rising_edge(CLK) THEN
            IF clk_div_max = 0 THEN
                clk_tick <= '0';
            ELSIF clk_div_cnt >= clk_div_max THEN
                clk_div_cnt <= (OTHERS => '0');
                clk_tick <= '1';
            ELSE
                clk_div_cnt <= clk_div_cnt + 1;
                clk_tick <= '0';
            END IF;
        END IF;
    END PROCESS;

    rgb_pattern_gen_proc: PROCESS (CLK, RST_N)
    BEGIN
        IF RST_N = '0' THEN
            rgb_reg <= (OTHERS => '0');
        ELSIF rising_edge(CLK) THEN
            IF clk_tick = '1' THEN
                rgb_reg <= rgb_reg + 1;
            END IF;
        END IF;
    END PROCESS;

    -- Output assignment (inverted logic for active-low RGB)
    RGB <= not STD_LOGIC_VECTOR(rgb_reg);

END behavioral;

-------------------------------------------------------

-- File: tb_rgb_sequencer.vhd
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.NUMERIC_STD.ALL;

ENTITY tb_rgb_sequencer IS
END tb_rgb_sequencer;

ARCHITECTURE sim OF tb_rgb_sequencer IS
    CONSTANT CLK_HZ : INTEGER := 50000000;
    CONSTANT CLK_PERIOD : TIME := 20 ns; -- 50 MHz
    -- DUT signals
    SIGNAL t_CLK   : STD_LOGIC := '0';
    SIGNAL t_RST_N : STD_LOGIC := '0';
    SIGNAL t_SW    : STD_LOGIC_VECTOR(1 DOWNTO 0) := "00";
    SIGNAL t_RGB   : STD_LOGIC_VECTOR(2 DOWNTO 0);

    -- Component Declaration
    COMPONENT rgb_sequencer IS
        GENERIC (
            CLK_HZ : INTEGER := 50000000
        );
        PORT (
            CLK   : IN STD_LOGIC;
            RST_N : IN STD_LOGIC;
            SW    : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
            RGB   : OUT STD_LOGIC_VECTOR(2 DOWNTO 0)
        );
    END COMPONENT;

BEGIN

    -- Instantiate DUT
    uut : rgb_sequencer
    GENERIC MAP(
        CLK_HZ => CLK_HZ
    )
    PORT MAP(
        CLK   => t_CLK,
        RST_N => t_RST_N,
        SW    => t_SW,
        RGB   => t_RGB
    );

    -- Clock generation
    clk_gen : PROCESS
    BEGIN
        t_CLK <= '1';
        WHILE true LOOP
            t_CLK <= NOT t_CLK;
            WAIT FOR CLK_PERIOD / 2;
        END LOOP;
    END PROCESS;

    -- Stimulus process
    stim_proc : PROCESS
    BEGIN
        t_RST_N <= '0';
        t_SW <= "00";
        WAIT FOR 200 ns;
        t_RST_N <= '1';
        WAIT FOR 1 ms;
        t_SW <= "01";
        WAIT FOR 5 ms;
        t_SW <= "10";
        WAIT FOR 10 ms;
        t_SW <= "11";
        WAIT FOR 20 ms;
        t_SW <= "00";
        WAIT;
    END PROCESS;

END sim;

-------------------------------------------------------


#============================================================
# FPGA assignments
#============================================================

#set_global_assignment -name FAMILY "MAX 10 FPGA"
#set_global_assignment -name DEVICE 10M50DAF484C7G

#============================================================
# CLOCK
#============================================================
set_instance_assignment -name IO_STANDARD "3.3-V LVTTL" -to CLK
set_location_assignment PIN_P11 -to CLK

#============================================================
# Slide Switches
#============================================================
set_instance_assignment -name IO_STANDARD "3.3-V LVTTL" -to SW[0]
set_instance_assignment -name IO_STANDARD "3.3-V LVTTL" -to SW[1]
set_location_assignment PIN_C10 -to SW[0]
set_location_assignment PIN_C11 -to SW[1]

#============================================================
# PUSH BUTTONS
#============================================================

set_instance_assignment -name IO_STANDARD "3.3 V SCHMITT TRIGGER" -to RST_N
set_location_assignment PIN_B8 -to RST_N

#============================================================
# PUSH GPIOs
#============================================================

set_instance_assignment -name IO_STANDARD "3.3-V LVTTL" -to RGB[0]
set_instance_assignment -name IO_STANDARD "3.3-V LVTTL" -to RGB[1]
set_instance_assignment -name IO_STANDARD "3.3-V LVTTL" -to RGB[2]
set_location_assignment PIN_AA8  -to RGB[0]
set_location_assignment PIN_AA9  -to RGB[1]
set_location_assignment PIN_AB10 -to RGB[2]

#============================================================

